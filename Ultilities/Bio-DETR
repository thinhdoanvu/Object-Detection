Step 1/ clone github: 
  git clone https://github.com/yangdi-cv/Bio-DETR.git

Step 2/ Create environment from old evn
  conda create --name biodetr --clone thanh-py3.10
  activate biodetr

Step 3/ Install bidetr
  pip install .

Step 4. Error 1. Disable Update ALBUMENTATIONS
  Window search "Edit system Environment Variables"
    - Click Environment Variable
      + New (Under System Variable) 
        * Name = NO_ALBUMENTATIONS_UPDATE
        * Value = 1

Step 5. Error KML
  - Click Environment Variable
    + New (Under System Variable) 
        * Name = KMP_DUPLICATE_LIB_OK
        * Value = TRUE

Step 6. Training
  yolo task=detect mode=train model=cfg/network/rtdetr_bio-detr.yaml data=../datasets/r2000v1/r2000v1.yaml batch=16 epochs=300

Step 7. Close Anaconda Prompt and Open again
  
Step 8. Evalue model size
  pip install fvcore

"""
CODE 4 ESTIMATE
"""
import torch
from ultralytics import YOLO
from fvcore.nn import FlopCountAnalysis, parameter_count_table

# Load model
model = YOLO("runs/detect/train/weights/best.pt")  # Replace with your .pt file
pytorch_model = model.model  # Extract PyTorch model

# Define input
inputs = torch.randn(1, 3, 640, 640)

# Calculate FLOPs
flops = FlopCountAnalysis(pytorch_model, inputs)
params = parameter_count_table(pytorch_model)

# Output results
print(f"FLOPs: {flops.total() / 1e9:.2f} GFLOPs")  # Convert to GFLOPs
print(params)


############## only for GLOPs #############
import torch
from ultralytics import YOLO
from ptflops import get_model_complexity_info

# Load model
model = YOLO("E:/thanh/ntu_group/thinh/ObjectDetection/yolo11/ultralytics/runs/detect/v9c_68.3/weights/best.pt")  # Replace with your .pt file
pytorch_model = model.model

# Compute FLOPs and parameters
macs, params = get_model_complexity_info(pytorch_model, (3, 640, 640), as_strings=True, print_per_layer_stat=False)

print(f"Computational complexity: {macs}")
print(f"Number of parameters: {params}")

""" 1 MAC = 2 FLOPs"""
